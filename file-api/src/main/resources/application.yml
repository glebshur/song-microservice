spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/file_api_db
    username: postgres
    password: postgres11
  cloud:
    aws:
      credentials:
        access-key: AKIAIOSFODNN7EXAMPLE
        secret-key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      region:
        static: eu-west-1
      endpoint: http://awslocal:4566
      s3:
        path-style-access-enabled: on
  servlet:
    multipart:
      max-file-size: 15MB
      max-request-size: 15MB
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/realms/song-microservice}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

jwt:
  auth:
    converter:
      client-id: file-api
      principal-attribute: preferred_username
#      client:
#        registration:
#          keycloak:
#            client-id: file-api
#            authorization-grant-type: authorization_code
#            scope: openid
#
#        provider:
#          keycloak:
#            issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/song-microservice}
#            user-name-attribute: preferred_username
#jwt:
#  auth:
#    converter:
#      resource-id: file-api
#      principal-attribute: preferred_username

server:
  port: 9000
  error:
    include-message: always
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}

management:
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
resilience4j:
  circuitbreaker:
    instances:
      s3StorageBreaker:
        failure-rate-threshold: 50
        minimum-number-of-calls: 3
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: count_based

local-base-path: temp-files/songs
files-per-directory: 3000
bucket-name: file-bucket
queue-name: file-enricher-queue
