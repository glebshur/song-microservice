spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/song_api_db
    username: postgres
    password: postgres11
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/song-microservice
          jwk-set-uri: http://localhost:8080/realms/song-microservice/protocol/openid-connect/certs
      client:
        registration:
          keycloak:
            client-id: song-api
            client-secret: vuWm5xl2QBBA1I8sovk0waJWxBW8888u
            authorization-grant-type: client_credentials
        provider:
          keycloak:
            token-uri: http://localhost:8080/realms/song-microservice/protocol/openid-connect/token
  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: superadmin

jwt:
  auth:
    converter:
      client-id: song-api
      principal-attribute: preferred_username

camel:
  component:
    aws2-sqs:
      access-key: AKIAIOSFODNN7EXAMPLE
      secret-key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
      region: eu-west-1
      override-endpoint: true
      uri-endpoint-override: http://awslocal:4566
  dataformat:
    jackson:
      auto-discover-object-mapper: true
  springboot:
    java-routes-exclude-pattern: "**/consumer/*"

server:
  port: 11000
  error:
    include-message: always
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka

file-api-name: file-api

message-brokers:
  sqs:
    delay: 1000
    consumer-queue: enricher-song-queue
  rabbitmq:
    exchange: default
    consumer-queue: enricher-song-queue

main-consumer-route: rabbitmq-consumer
