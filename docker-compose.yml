version: '3'

services:
  file-api:
    build: ./file-api/
    ports:
      - 9000:9000
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres_container:5432/file_api_db"
      SPRING_DATASOURCE_USERNAME: "postgres"
      SPRING_DATASOURCE_PASSWORD: "postgres11"
      SPRING_CLOUD_AWS_ENDPOINT: "http://awslocal:4566"
      EUREKA_URI: "http://eureka-server:8761/eureka"
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CLOUD_CONFIG_URI: "http://config-server:8071"
      JWT_ISSUER_URI: "http://keycloak:8080/realms/song-microservice"
    volumes:
      - "file_api_local_data:/app/temp-files/songs"
    depends_on:
      postgres_container: 
        condition: service_started
      localstack:
        condition: service_started
      eureka-server:
        condition: service_started
      config-server:
        condition: service_healthy
      minio:
        condition: service_started

  enricher-service:
    build: ./enricher-service/
    environment:
      EUREKA_URI: "http://eureka-server:8761/eureka"
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CLOUD_CONFIG_URI: "http://config-server:8071"
      KEYCLOAK_TOKEN_URI: "http://keycloak:8080/realms/song-microservice/protocol/openid-connect/token"
    ports:
      - 10000:10000
    depends_on:
      localstack:
        condition: service_started
      eureka-server:
        condition: service_started
      file-api:
        condition: service_started
      config-server:
        condition: service_healthy
  
  song-api:
    build: ./songapi/
    environment:
      EUREKA_URI: "http://eureka-server:8761/eureka"
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CLOUD_CONFIG_URI: "http://config-server:8071"
    ports:
      - 11000:11000
    depends_on:
      postgres_container: 
        condition: service_started
      localstack:
        condition: service_started
      eureka-server:
        condition: service_started
      config-server:
        condition: service_healthy

  eureka-server:
    build: ./eureka-server/
    ports:
      - 8761:8761

  config-server:
    build: ./configserver/
    environment:
      EUREKA_URI: "http://eureka-server:8761/eureka"
      NATIVE_LOCATIONS: "/app/src/main/resources/config"
    ports:
      - 8071:8071
    volumes:
      - "./configserver/src/main/resources/config:/app/src/main/resources/config"
    healthcheck:
      test: "wget -qO- http://localhost:8071/actuator/health/ | grep UP || exit 1"
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    depends_on:
      - eureka-server

  gateway:
    build: ./gateway/
    environment:
      EUREKA_URI: "http://eureka-server:8761/eureka"
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_CLOUD_CONFIG_URI: "http://config-server:8071"
    ports:
      - 8091:8091
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_started

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME-localstack_main}"
    hostname: "awslocal"
    image: localstack/localstack
    ports:
      - "127.0.0.1:4566:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - AWS_DEFAULT_REGION=eu-west-1
      - HOSTNAME_EXTERNAL=awslocal
    volumes:
      - "./localstack/init-scripts.sh:/etc/localstack/init/ready.d/init-scripts.sh"
      - "${LOCALSTACK_VOLUME_DIR:-./localstack/volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
  
  keycloak:
    image: quay.io/keycloak/keycloak:20.0.0       
    command: start-dev
    container_name: keycloak
    environment:
      #KC_HOSTNAME: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin           
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres_keycloak:5432/keycloak
      KC_DB_PASSWORD: postgres11
      KC_DB_USERNAME: postgres
    ports:      
      - "8080:8080"      
    depends_on:      
      - postgres_keycloak

  postgres_keycloak:
    image: 'postgres:13.1-alpine'
    container_name: postgres_keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres11"
    volumes:
      - pg_keycloak_data:/var/lib/postgresql/data
    
  postgres_container:
    image: 'postgres:13.1-alpine'
    container_name: postgres_container
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres11"
    volumes:
      - ./postgres/db_init:/docker-entrypoint-initdb.d
      - pg_data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:5.7
    environment:
      PGADMIN_DEFAULT_EMAIL: "developer@enail.com"
      PGADMIN_DEFAULT_PASSWORD: "pgadmin1"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
  
  minio:
    image: quay.io/minio/minio:RELEASE.2023-07-21T21-12-44Z
    command: server --console-address ":9091" /data
    ports:
      - "9090:9000"
      - "9091:9091"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: superadmin
    volumes:
      - minio_data:/data
  
  mongodb:
    image: mongo:7.0-rc-jammy
    environment:
      MONGO_INITDB_DATABASE: file-storage
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: superadmin
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
  
  rabbitmq:
    image: rabbitmq:3.12.2-management
    hostname: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: superadmin
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit disk_free_limit 2147483648
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - 15672:15672

volumes:
  file_api_local_data:
  pg_data:
  pgadmin-data:
  pg_keycloak_data:
  minio_data:
  mongodb_data:
  rabbitmq_data:
